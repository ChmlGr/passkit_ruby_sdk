# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: passkit_sdk/flights/a_rpc.proto for package 'flights'
# Original file comments:
# *
# Flights RPC
#
# The PassKit Flights API lets you manage your flights and boarding passes for Apple Wallet and Google Pay.

require 'grpc'
require 'passkit_sdk/flights/a_rpc_pb'

module PasskitSdk
  module Flights
    class Service
      include GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'flights.Flights'

      # Create an airport record. Optional method allowing the carrier to specify how the airport name is rendered in the pass and the GPS location that will trigger a lock-screen alert.
      rpc :createPort, Port, Google::Protobuf::Empty
      # Retrieve an airport record. The AirportCode is the three character IATA code or 4 character ICAO code.
      rpc :getPort, AirportCode, Port
      # Update an airport record.
      rpc :updatePort, Port, Port
      # Delete an airport record. Deleting a record will remove any custom data provided. A new Airport record may be automatically created for a flight departing, arriving or transiting an airport which does not have a record, using publicly available data.
      rpc :deletePort, AirportCode, Google::Protobuf::Empty
      # Create a carrier record. All Flight Designations and Flights must have a carrier record.
      rpc :createCarrier, Carrier, Google::Protobuf::Empty
      # Retrieve a carrier record.
      rpc :getCarrier, CarrierCode, Carrier
      # Update a carrier record
      rpc :updateCarrier, Carrier, Carrier
      # Delete a carrier record.
      rpc :deleteCarrier, CarrierCode, Google::Protobuf::Empty
      # Create a flight designator record. As much default information as possible should be provided to facilitate the automatic generation of flight records.
      rpc :createFlightDesignator, FlightDesignator, Google::Protobuf::Empty
      # Retrieve a flight designation record.
      rpc :getFlightDesignator, FlightDesignatorRequest, FlightDesignator
      # Update a flight designation record.
      rpc :updateFlightDesignator, FlightDesignator, FlightDesignator
      # Delete a flight designation record.
      rpc :deleteFlightDesignator, FlightDesignatorRequest, Google::Protobuf::Empty
      # Create a flight record. In practice, this method is not often used, since flight records can be automatically generated. Any information in the flight record will override information in the carrier and flight designation records.
      rpc :createFlight, Flight, Google::Protobuf::Empty
      # Retrieve a flight record.
      rpc :getFlight, FlightRequest, Flight
      # Update a flight record.
      rpc :updateFlight, Flight, Flight
      # Delete a flight record.
      rpc :deleteFlight, FlightRequest, Google::Protobuf::Empty
      # Create a boarding pass record. Flight related information not present in the boarding pass record will be populated from the flight, flight designator or carrier records.
      rpc :createBoardingPass, BoardingPassRecord, BoardingPassesResponse
      # Retrieve a boarding pass record.
      rpc :getBoardingPassRecord, BoardingPassRecordRequest, BoardingPassRecord
      # Retrieve digital boarding pass(es) in the requested format by ticket number, index, PNR or id.
      rpc :getBoardingPass, BoardingPassRequest, BoardingPassesResponse
      # Update a boarding pass record.
      rpc :updateBoardingPass, BoardingPassRecord, BoardingPassRecord
      # Delete a boarding pass record.
      rpc :deleteBoardingPass, BoardingPassRecordRequest, Google::Protobuf::Empty
    end

    Stub = Service.rpc_stub_class
  end
end
